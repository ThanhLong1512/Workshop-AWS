[{"uri":"https://thanhlong1512.github.io/Workshop-AWS/vi/3-containerization/3.1-development-env/3.1.1-install-docker/","title":"Cài đặt Docker Desktop","tags":[],"description":"","content":"Tổng quan về Docker Docker là một nền tảng cho developers và sysadmin để develop, deploy và run application với container. Nó cho phép tạo các môi trường độc lập và tách biệt để khởi chạy và phát triển ứng dụng và môi trường này được gọi là container. Khi cần deploy lên bất kỳ server nào chỉ cần run container của Docker thì application của bạn sẽ được khởi chạy ngay lập tức.\nCác thành phần chính của Docker\nNguyên tắc hoạt động của Docker\nContainerization là gì?\nContainerization là một công nghệ ảo hoá, giúp giải quyết vấn đề này bằng cách đóng gói ứng dụng và tất cả các phụ thuộc (dependencies) của nó (như thư viện, cấu hình) vào một đơn vị độc lập gọi là container. Container này đảm bảo rằng phần mềm sẽ chạy ổn định và nhất quán trên bất kỳ môi trường nào, dù là trên máy tính cá nhân của Developer, Test Server, hay môi trường Production trên cloud.\nTrước khi có container: Developer viết một ứng dụng trên máy tính cá nhân sử dụng thư viện Python phiên bản 3.6. Sau khi kiểm thử thành công, anh ấy triển khai ứng dụng này lên máy chủ Production, nhưng máy chủ này lại đang chạy Python phiên bản 3.7. Sự khác biệt nhỏ này đã gây ra lỗi do một số thư viện không tương thích với Python 3.7.\nVới container: Developer có thể đóng gói ứng dụng của mình cùng với tất cả các thư viện, bao gồm phiên bản Python 3.6 mà ứng dụng cần, vào một container. Khi container này được triển khai trên bất kỳ môi trường nào (local, test, production), ứng dụng vẫn sẽ hoạt động chính xác như khi nó được kiểm thử trên máy tính cá nhân.\nVai trò của Containerization\nConsistency (Nhất quán): Đảm bảo rằng ứng dụng được đóng gói trong container sẽ hoạt động giống nhau trên mọi môi trường, dù là trên máy tính của developer, test server, hay môi trường production.\nPortability (Di động): container là các gói phần mềm nhẹ có thể dễ dàng chuyển từ hệ thống này sang hệ thống khác mà không gặp vấn đề về tương thích.\nScalability (Khả năng mở rộng): Containers có thể được khởi động hoặc dừng nhanh chóng, cho phép các ứng dụng dễ dàng mở rộng hoặc thu hẹp tùy theo nhu cầu sử dụng thực tế.\nEfficiency (Hiệu quả): Container chia sẻ kernel của hệ điều hành chủ, không giống như các máy ảo truyền thống phải có một hệ điều hành đầy đủ riêng. Điều này làm cho container tốn ít tài nguyên hơn, khởi động nhanh hơn và có ít chi phí quản lý hơn.\nIsolation (Cô lập): Container đảm bảo rằng các ứng dụng được cô lập với nhau, tăng cường bảo mật. Nếu một ứng dụng bị tấn công, sự cố này không ảnh hưởng đến các ứng dụng khác.\nHướng dẫn cài đặt và sử dụng Docker Hướng dẫn này chỉ dành cho hệ điều hành Windows.\nNếu bạn đang sử dụng macOS hoặc một hệ điều hành nào khác, vui lòng tìm tài liệu hướng dẫn phù hợp, vì các bước cài đặt và yêu cầu hệ thống có thể khác biệt đáng kể.\nKiểm tra lại hệ điều hành của bạn trước khi tiếp tục để tránh lỗi hoặc cài đặt không tương thích.\nTải ứng dụng Docker Desktop tại đường link, lưu ý nếu máy tính của bạn dùng chip ARM thì chúng ta sử dụng phiên bản dưới, nếu sử dụng chip x86/x64 của Intel và AMD thì tải phiên bản trên. Double click vào file Docker Desktop Installer.exe đã download ở bước 1 để bắt đầu cài đặt. Mặc định, Docker Desktop được cài đặt tại đường dẫn C:\\Program Files\\Docker\\Docker. và sau đó nhấn OK để tải Sau khi hoàn tất cài đặt thì nhấn Close and Restart Vào CMD và gõ wsl nếu xuất hiện tương tự như hình ảnh bên dưới thì bạn đã thành công "},{"uri":"https://thanhlong1512.github.io/Workshop-AWS/vi/3-containerization/3.1-development-env/","title":"Chuẩn bị Development Environment","tags":[],"description":"","content":"Nội dung Cài đặt Docker Desktop Thiết lập Git và Github repository Hướng dẫn clone dự án FE\u0026amp;BE và đẩy lên Github Repository "},{"uri":"https://thanhlong1512.github.io/Workshop-AWS/vi/2-prerequiste/2.1-createec2/","title":"Chuẩn bị VPC và EC2","tags":[],"description":"","content":"Trong bước này, chúng ta sẽ cần tạo một VPC có 2 subnet public / private. Sau đó tạo 1 EC2 Instance Linux nằm trong public subnet, 1 EC2 Instance Windows nằm trong private subnet.\nĐể tìm hiểu cách tạo các EC2 instance và VPC với public/private subnet các bạn có thể tham khảo bài lab :\nGiới thiệu về Amazon EC2 Làm việc với Amazon VPC Nội dung Tạo VPC Tạo Public subnet Tạo máy chủ Linux public "},{"uri":"https://thanhlong1512.github.io/Workshop-AWS/vi/1-introduce/","title":"Giới thiệu","tags":[],"description":"","content":"Tổng quan Kiến trúc này mô tả một Serverless Web Application được xây dựng hoàn toàn trên nền tảng AWS, sử dụng các dịch vụ managed để tạo ra một ứng dụng có khả năng mở rộng cao, chi phí tối ưu và bảo mật tốt. Ứng dụng được thiết kế theo mô hình 3-tier architecture với frontend, backend và các dịch vụ hỗ trợ.\nCác thành phần chính trong kiến trúc User Access \u0026amp; Code Management GitHub: Quản lý mã nguồn và version control cho toàn bộ ứng dụng User: Người dùng cuối truy cập ứng dụng thông qua web browser Security \u0026amp; Network Layer (Lớp bảo mật và mạng) AWS Route 53 là dịch vụ DNS (Domain Name System) có khả năng mở rộng cao và độ tin cậy cao của AWS. Route 53 kết nối các yêu cầu của người dùng với cơ sở hạ tầng chạy trên AWS như EC2 instances, Elastic Load Balancers hoặc Amazon S3 buckets. Route 53 cũng có thể được sử dụng để định tuyến người dùng đến cơ sở hạ tầng bên ngoài AWS. AWS Application Load Balancer (ALB) hoạt động ở layer 7 của mô hình OSI (Application Layer) và có thể định tuyến traffic dựa trên nội dung của request. ALB hỗ trợ path-based routing và host-based routing, có thể phân phối traffic đến nhiều target groups khác nhau. ALB tích hợp tốt với các dịch vụ AWS khác như Auto Scaling, ECS, và Lambda AWS CloudFront là dịch vụ Content Delivery Network (CDN) toàn cầu giúp phân phối nội dung với độ trễ thấp và tốc độ truyền tải cao. CloudFront sử dụng mạng lưới các edge locations trên toàn thế giới để cache nội dung gần người dùng cuối nhất, giảm thiểu thời gian load trang và cải thiện trải nghiệm người dùng. AWS WAF (Web Application Firewall) là dịch vụ firewall ứng dụng web giúp bảo vệ ứng dụng khỏi các cuộc tấn công web phổ biến như SQL injection, cross-site scripting (XSS). WAF cho phép tạo các rule tùy chỉnh để filter, monitor và block traffic độc hại dựa trên các điều kiện như IP addresses, HTTP headers, HTTP body, hoặc URI strings. Application Layer (Lớp ứng dụng) Frontend Container Chạy trên port 80 Sử dụng Nginx làm web server Có thể chứa ứng dụng React, Angular hoặc Vue.js Port 4375 cho các kết nối nội bộ Backend Container Chạy trên port 4000 Sử dụng Express.js framework (Node.js) Xử lý business logic và API endpoints Kết nối với các dịch vụ AWS khác AWS Managed Services Amazon EC2 (Elastic Compute Cloud) cung cấp khả năng tính toán có thể mở rộng trong cloud. EC2 cho phép khởi chạy các máy chủ ảo (instances) với nhiều cấu hình khác nhau về CPU, memory, storage và network. Người dùng có thể chọn từ nhiều loại instance types được tối ưu hóa cho các workload khác nhau như compute-optimized, memory-optimized, storage-optimized. AWS KMS (Key Management Service) là dịch vụ quản lý khóa mã hóa được quản lý hoàn toàn, giúp tạo và kiểm soát các khóa mã hóa được sử dụng để mã hóa dữ liệu. KMS tích hợp với hầu hết các dịch vụ AWS khác để bảo vệ dữ liệu được lưu trữ trong các dịch vụ đó. KMS sử dụng Hardware Security Modules (HSMs) để bảo vệ tính bảo mật của khóa. Amazon CloudWatch là dịch vụ monitoring và observability được xây dựng cho DevOps engineers, developers, site reliability engineers (SREs) và IT managers. CloudWatch cung cấp dữ liệu và actionable insights để monitor các ứng dụng, hiểu và phản hồi với các thay đổi hiệu suất system-wide, tối ưu hóa việc sử dụng tài nguyên và có cái nhìn tổng thể về operational health. Amazon S3 (Simple Storage Service) là dịch vụ object storage được xây dựng để lưu trữ và truy xuất bất kỳ lượng dữ liệu nào từ bất cứ đâu. S3 cung cấp độ bền 99.999999999% (11 9\u0026rsquo;s) và lưu trữ dữ liệu cho hàng triệu ứng dụng cho các công ty trên toàn thế giới. S3 cung cấp các tính năng quản lý đơn giản để có thể tổ chức dữ liệu và cấu hình access controls tinh tế. Amazon SNS (Simple Notification Service) là dịch vụ messaging được quản lý hoàn toàn cho cả application-to-application (A2A) và application-to-person (A2P) communication. SNS cung cấp các chủ đề (topics) cho high-throughput, push-based, many-to-many messaging giữa các hệ thống phân tán, microservices và event-driven serverless applications. Database \u0026amp; Data Processing MongoDB: Cơ sở dữ liệu NoSQL để lưu trữ dữ liệu ứng dụng Kết nối với AWS ecosystem thông qua các managed services "},{"uri":"https://thanhlong1512.github.io/Workshop-AWS/vi/4-securitymonitoring/4.1-aws-kms/","title":"Mã hóa dữ liệu với AWS KMS","tags":[],"description":"","content":"Giới thiệu AWS Key Management Service (KMS) cung cấp khả năng tạo và quản lý khóa mã hóa một cách tập trung, cho phép mã hóa dữ liệu cả khi lưu trữ (at rest) và trong quá trình truyền tải (in transit). Kết hợp với AWS Certificate Manager (ACM), hệ thống có thể tự động quản lý vòng đời của các chứng chỉ SSL/TLS, từ việc cấp phát, gia hạn đến triển khai across các dịch vụ AWS.\nĐối với ứng dụng web được deploy trên EC2 với database MongoDB Atlas, việc implement mã hóa KMS đảm bảo rằng các thông tin như connection strings, user credentials, payment data, và personal information được bảo vệ ở mức độ enterprise. Điều này đặc biệt quan trọng khi ứng dụng xử lý dữ liệu cá nhân theo các quy định như GDPR, CCPA, hoặc luật An toàn thông tin mạng Việt Nam.\nThông qua việc tích hợp IAM roles và policies, EC2 instances có thể securely access KMS keys mà không cần hard-code credentials, tuân theo nguyên tắc least privilege và zero-trust security model. Kết hợp với CloudFront distribution sử dụng ACM certificates, toàn bộ traffic từ end-users đến application được mã hóa end-to-end, tạo nên một security perimeter toàn diện cho hệ thống.\nCác bước thực hiện Bước 1: Truy cập AWS Console -\u0026gt; AWS KMS -\u0026gt; Create Key Bước 2: Chọn \u0026ldquo;Symmetric\u0026rdquo; và Key usage: \u0026ldquo;Encrypt and decrypt\u0026rdquo; Bước 3: Chọn Role_ec2 -\u0026gt; Next Bước 4: Kiểm tra lại policy của role đó đã đúng chưa Bước 5: Chọn Finish để tạo Bước 6: Thực hiện mở Visual Studio Code -\u0026gt; AWS-BE Bước 7: Mở Terminal -\u0026gt; npm install aws-sdk Bước 8: Tạo kms.js vào thư mục utils với nội dụng như sau:\nkms.js const AWS = require(\"aws-sdk\"); AWS.config.update({ region: \"ap-southeast-1\" }); const kms = new AWS.KMS(); class KMSService { constructor() { this.keyAlias = \"alias/KMS-KEY\"; } async encrypt(plaintext) { try { console.log(\"Encrypting data...\"); const params = { KeyId: this.keyAlias, Plaintext: Buffer.from(plaintext, \"utf8\") }; const result = await kms.encrypt(params).promise(); const encrypted = result.CiphertextBlob.toString(\"base64\"); console.log(\"Data encrypted successfully\"); return encrypted; } catch (error) { console.error(\"Encryption failed:\", error.message); throw error; } } async decrypt(encryptedData) { try { console.log(\"Decrypting data...\"); const params = { CiphertextBlob: Buffer.from(encryptedData, \"base64\") }; const result = await kms.decrypt(params).promise(); const decrypted = result.Plaintext.toString(\"utf8\"); console.log(\"Data decrypted successfully\"); return decrypted; } catch (error) { console.error(\"Decryption failed:\", error.message); throw error; } } async encryptJSON(object) { const jsonString = JSON.stringify(object); return await this.encrypt(jsonString); } async decryptJSON(encryptedData) { const decryptedString = await this.decrypt(encryptedData); return JSON.parse(decryptedString); } } module.exports = new KMSService(); Bước 9: Thực hiện ghi 4 method bên dưới vào thư mục models/AccountModel.js\nBước 10: Thực hiện gọi phương thức như hình bên dưới đối với dữ liệu là AccountModel.js\n"},{"uri":"https://thanhlong1512.github.io/Workshop-AWS/vi/3-containerization/3.3-deloy-scripts/3.3.1-deploy-fe/","title":"Tạo scripts để deploy ứng dụng React.js","tags":[],"description":"","content":"Giới thiệu Việc deploy ứng dụng React.js lên production server là một quá trình phức tạp với nhiều bước cần thực hiện chính xác. Thay vì làm thủ công từng bước - dễ dẫn đến sai sót và mất thời gian, chúng ta sẽ tạo các scripts tự động hóa toàn bộ quá trình này. Scripts deployment giúp đảm bảo tính nhất quán, giảm thiểu lỗi human error và cho phép deploy nhanh chóng, đáng tin cậy. Đặc biệt quan trọng khi cần deploy nhiều lần hoặc trên nhiều môi trường khác nhau. Trong thực tế production, một quy trình deploy Node.js chuẩn cần bao gồm: setup môi trường server, cài đặt dependencies, cấu hình web server (Nginx), thiết lập SSL, quản lý process và monitoring. Mỗi bước đều có những chi tiết kỹ thuật riêng và cần được thực hiện theo đúng thứ tự.\nLợi ích của việc script hóa deployment Tính nhất quán: Mỗi lần deploy đều thực hiện chính xác các bước giống nhau, loại bỏ sự khác biệt giữa các lần deploy và đảm bảo môi trường production ổn định. Tiết kiệm thời gian: Tự động hóa các tác vụ lặp đi lặp lại, giảm thời gian deploy từ hàng giờ xuống còn vài phút. Giảm thiểu lỗi: Loại bỏ human error thường xảy ra khi thực hiện thủ công nhiều bước phức tạp. Khả năng rollback: Có thể nhanh chóng quay lại phiên bản trước khi gặp vấn đề. Tái sử dụng: Scripts có thể được customize và sử dụng cho multiple projects và environments. Quy trình thực hiện Bước 1: Truy cập vào EC2 -\u0026gt; Instances .\nBước 2: Chọn instances đã tạo -\u0026gt; Connect -\u0026gt; Connect\nBước 3: Copy dòng lệnh và chạy lệnh sudo apt-get update \u0026amp;\u0026amp; sudo apt-get install docker.io -y \u0026amp;\u0026amp; sudo systemctl start docker \u0026amp;\u0026amp; sudo chmod 666 /var/run/docker.sock \u0026amp;\u0026amp; sudo systemctl enable docker \u0026amp;\u0026amp; docker \u0026ndash;version và sau đó chạy lệnh docker ps để kiểm tra cài đặt Bước 4: Truy cập GitHub và vào dự án AWS-FE, sau đó chọn Settings -\u0026gt; Runner -\u0026gt; New self-hosted runner\nBước 5: Chọn Runner image: Linux và sau đó sao chép các lệnh dưới đây vào EC2 Instances\nBước 6: Sau khi chạy xong các lệnh trên, chạy thêm 2 lệnh bên dưới\nec2 sudo ./svc.sh install sudo ./svc.sh start Bước 7: Sau khi đã chạy thành công các lệnh trên, kiểm tra runner hoạt động như hình bên dưới Bước 8: Truy cập Visual Studio Code sau đó mở project AWS-Fe Bước 9: Thực hiện push code lên GitHub,sau đó vào mục Actions trong GitHub và chờ đợi quá trình deploy Bước 10: Kiểm tra quá trình deploy thành công như hình bên bên dưới Bước 11: Sau khi quá trình deploy đã thành công thì kiểm tra Public IP EC2:5173 "},{"uri":"https://thanhlong1512.github.io/Workshop-AWS/vi/2-prerequiste/2.3-sgandnetwork/2.3.1-createsg/","title":"Tạo Security Groups","tags":[],"description":"","content":"Tạo Security Group trong Amazon VPC Tổng quan\nSecurity Group là tường lửa ảo cho các tài nguyên AWS Hoạt động như danh sách kiểm soát truy cập (ACL) ở cấp instance Cho phép kiểm soát lưu lượng vào/ra theo port và protocol Tạo ALB Security Group\nTruy cập giao diện VPC\nChọn Security Groups từ menu bên trái Click Create security group Cấu hình thông tin cơ bản Security Group name: Nhập alb-security-group Description: Security group for Application Load Balancer VPC: Chọn Mern-stack VPC Thiết lập Inbound Rule, Outbound Rule Click Add rule Rule 1: Type: HTTP Source: Anywhere (cho phép ping từ mọi nơi) Rule 2: Type: HTTPs Source: Anywhere (cho phép ping từ mọi nơi) Xác nhận Inbound/Outbound Rules và tạo Security Group Kiểm tra Security Group đã tạo Tạo Application Security Group\nTruy cập giao diện VPC\nChọn Security Groups từ menu bên trái Click Create security group Cấu hình thông tin cơ bản Security Group name: Nhập app-security-group Description: Security group for application containers VPC: Chọn Mern-stack VPC Thiết lập Inbound Rule, Outbound Rule\nClick Add rule Rule 1: Type: HTTP Source: Anywhere (cho phép ping từ mọi nơi) Rule 2: Type: HTTPs Source: Anywhere (cho phép ping từ mọi nơi) Xác nhận Inbound/Outbound Rules và tạo Security Group\nKiểm tra Security Group đã tạo "},{"uri":"https://thanhlong1512.github.io/Workshop-AWS/vi/2-prerequiste/2.1-createec2/2.1.1-createvpc/","title":"Tạo VPC ","tags":[],"description":"","content":"Tạo VPC Lab VPC Truy cập giao diện quản trị dịch vụ VPC Click Your VPC. Click Create VPC. Tại trang Create VPC. Tại mục Name tag điền Mern-stack VPC. Tại mục IPv4 CIDR điền : 10.0.0.0/24. Click Create VPC. Kiểm tra trạng thái VPC sau khi tạo xong "},{"uri":"https://thanhlong1512.github.io/Workshop-AWS/vi/3-containerization/3.2-create-dockercontainer/3.2.1-preparation/","title":"Thiết lập môi trường để triển khai","tags":[],"description":"","content":"Giới thiệu Trước khi bắt đầu triển khai ứng dụng lên production, chúng ta cần chuẩn bị đầy đủ môi trường và các công cụ cần thiết. Việc thiết lập môi trường đúng cách sẽ giúp quá trình deployment diễn ra suôn sẻ và tránh các lỗi không mong muốn.\nNhững gì chúng ta sẽ chuẩn bị Các Extensions cần thiết Containerization Tools CI/CD Pipeline Tạo Repositories trên Docker Hub Cách thực hiện Thực hiện cài đặt các Extensions cần thiết\nBước 1: Bạn mở phần mềm Visual Studio Code sau đó nhấn tổ hợp phím Ctrl+Shift+X Bước 2: Bạn tìm kiếm Docker sau đó nhấn Install Bước 3: Lặp lại bước 2 với GitHub Action Bước 4: Kiểm tra extension đã được cài đặt ở hình bên dưới Containerization Tools:\nBước 1: Sau khi bạn đã thực hiện thành công phần 3.1.1 thì sau đó bạn giúp tôi mở Docker Desktop lên Bước 2: Bạn truy cập theo chỉ dẫn hình bên dưới Bước 3: Chọn Personal access token \u0026ndash;\u0026gt; Generate new token Bước 4: Điền thông tin Docker Token Info rồi sau đó chọn Generate Bước 5: Lưu lại 2 thông tin bên dưới hình để tiếp tục cho quá trình chuẩn bị tiếp theo CI/CD Pipeline:\nBước 1: Mở GitHub và thực hiện đăng nhập tài khoản của bạn Bước 2: Vào repository mà bạn đã tạo tên là AWS-FE Bước 3: Tiếp theo sẽ vào mục Settings -\u0026gt; Secrets and variables -\u0026gt; Action Bước 4: Chọn New repository secret Bước 5: Name: DOCKER_USERNAME và Secret: thanhlep Bước 6: Tương tư với DOCKER_PASSWORD Tạo Repositories trên Docker Hub\nBước 1: Đăng nhập tài khoản của bạn trên Docker Hub Bước 2: Chọn Repositories -\u0026gt; Create a repository Bước 3: Repository name: reactjs-web và Visibility: Public Bước 4: Tạo tương tự đối với nodejs-web "},{"uri":"https://thanhlong1512.github.io/Workshop-AWS/vi/","title":"Xây dựng Ứng dụng Containerized trên AWS với CI/CD Pipeline","tags":[],"description":"","content":"Xây dựng Ứng dụng Containerized trên AWS với CI/CD Pipeline Tổng quan Workshop này hướng dẫn bạn xây dựng một hệ thống ứng dụng web containerized hoàn chỉnh trên AWS với CI/CD pipeline tự động. Chúng ta sẽ bắt đầu từ việc phát triển ứng dụng trên GitHub, thiết lập Docker containers, triển khai lên AWS thông qua load balancer, và tích hợp các dịch vụ bảo mật, monitoring, và notification.\nKiến trúc bao gồm Frontend: React.js application containerized Backend: Node.js/Express.js API containerized Database: MongoDB hoặc PostgreSQL Security: KMS encryption, SNS notifications Monitoring: CloudWatch metrics và alerts Mục đích Học Container Technology: Hiểu rõ Docker containerization, cách đóng gói và triển khai ứng dụng. Xây dựng CI/CD Pipeline: Tự động hóa quy trình build, test, deploy từ GitHub đến AWS. Quản lý Infrastructure: Thiết lập load balancing, auto scaling, security groups và networking. Bảo mật và Monitoring: Tích hợp WAF, KMS encryption, CloudWatch monitoring và SNS alerts. Production Ready: Xây dựng hệ thống highly available, scalable và secure cho môi trường production. Chi phí ước tính AWS Free Tier: EC2 t2.micro, ALB (750 hours/tháng) CloudFront: $0.085/GB cho 10TB đầu tiên Route 53: $0.50/hosted zone/tháng KMS: $1/key/tháng + $0.03/10,000 requests SNS: $0.50/1 million requests Ước tính tổng: $10-30/tháng tùy theo traffic Nội dung Giới thiệu Các bước chuẩn bị Thiết lập và Containerization Bảo mật và giám sát phần mềm Dọn dẹp tài nguyên "},{"uri":"https://thanhlong1512.github.io/Workshop-AWS/vi/4-securitymonitoring/4.2-aws-waf/","title":"Bảo vệ ứng dụng web với AWS WAF","tags":[],"description":"","content":"Giới thiệu AWS WAF (Web Application Firewall) là một dịch vụ bảo mật đám mây mạnh mẽ được thiết kế để bảo vệ ứng dụng web của bạn khỏi các cuộc tấn công mạng phổ biến và lưu lượng truy cập độc hại. Hoạt động tại tầng ứng dụng (Layer 7 của mô hình OSI), AWS WAF cung cấp khả năng kiểm soát chi tiết đối với lưu lượng HTTP/HTTPS đến ứng dụng của bạn.\nTại sao cần AWS WAF? Trong bối cảnh an ninh mạng ngày càng phức tạp, các ứng dụng web phải đối mặt với nhiều loại tấn công khác nhau:\nSQL Injection: Kẻ tấn công chèn mã SQL độc hại vào các truy vấn database Cross-Site Scripting (XSS): Tiêm mã JavaScript độc hại vào trang web DDoS Attack: Làm quá tải server bằng lượng request khổng lồ Bot Traffic: Các bot độc hại có thể scrape dữ liệu hoặc tạo fake traffic Geographic Attacks: Tấn công từ các vùng địa lý nguy hiểm AWS WAF hoạt động như một lá chắn bảo vệ, lọc và kiểm soát mọi request trước khi chúng đến được ứng dụng của bạn.\nCác bước thực hiện Bước 1: Truy cập AWS Console -\u0026gt; EC2 -\u0026gt; Target groups-\u0026gt; Create target group Bước 2: Thực hiện cấu hình bên dưới:\nTarget group name: Mernstack-TG VPC: Mernstack-VPC Register target: Mernstack-EC2 Bước 3: Sau khi đã cấu hình trên thì chọn Create target group Bước 4: Truy cập AWS Console -\u0026gt; EC2 -\u0026gt; Load Balancer -\u0026gt; Create load balancer Bước 5: Thực hiện các cấu hình bên dưới:\nLoad balancer name: Mernstack-ALB Scheme: Internet-facing IP address type: IPv4 VPC: Mern-stack VPC Availability Zones: Mern-stack Subnet và Mern-stack Subnet 02 Security group: alb-security-group Default Action: Mernstack-TG Optimize with service integration:WAF Bước 6: Sau khi đã cấu hình xong thì chọn Create load balancer Bước 7: Truy cập AWS Console -\u0026gt; WAF \u0026amp; Shield Bước 8: Chọn Create web ACL Bước 9: Thực hiện cấu hình bên dưới:\nRegion: Asia Pacific (Singapore) Name: Mernstack-WAF Resources: Chọn Application -\u0026gt; Mernstack-ALB Rule: Chọn Add Rule -\u0026gt; Add managed rule groups Bước 10 Tiến hành tạo Create web ACL "},{"uri":"https://thanhlong1512.github.io/Workshop-AWS/vi/2-prerequiste/","title":"Các bước chuẩn bị","tags":[],"description":"","content":" Bạn cần tạo sẵn 1 Linux instance thuộc public subnet và 1 Window instance thuộc private subnet để thực hiện bài thực hành này.\nĐể tìm hiểu cách tạo các EC2 instance và VPC với public/private subnet các bạn có thể tham khảo bài lab :\nGiới thiệu về Amazon EC2 Làm việc với Amazon VPC Để sử dụng System Manager để quản lý window instance nói riêng và các instance nói chung của chúng ta trên AWS, ta cần phải cung cấp quyền cho các instance của chúng ta có thể làm việc với System Manager.Trong phần chuẩn bị này, chúng ta cũng sẽ tiến hành tạo IAM Role để cấp quyền cho các instance có thể làm việc với System Manager.\nNội dung Chuẩn bị VPC và EC2 Instance Tạo IAM Policies Thiết lập bảo mật và mạng Tạo IAM Role "},{"uri":"https://thanhlong1512.github.io/Workshop-AWS/vi/3-containerization/3.2-create-dockercontainer/","title":"Tạo Docker Containers","tags":[],"description":"","content":" Giới thiệu Docker và Containerization? Docker là một platform containerization cho phép đóng gói ứng dụng và tất cả dependencies vào một container nhẹ, portable và isolated. Container có thể chạy nhất quán trên bất kỳ môi trường nào.\nTại sao sử dụng Docker?\nConsistency: Đảm bảo ứng dụng chạy giống nhau trên mọi môi trường. Portability: Dễ dàng deploy từ development đến production. Efficiency: Sử dụng tài nguyên hiệu quả hơn VMs. Scalability: Dễ dàng scale các service. Chuẩn bị:\nBước 1: Để đảm bảo bạn đã cài đặt Docker hãy dán lệnh đó vào bash để kiểm tra phiên bản docker trong máy bạn bash docker --version Bước 2: Nếu bạn chưa cài đặt Docker thì đây là video hướng dẫn cài đặt Docker Bước 3: Kiểm tra kết quả nếu bạn xuất hiện tương tự như hình ảnh bên dưới thì chúc mừng bạn Nội dung: Thiết lập môi trường để triển khai Viết Dockerfile cho Frontend (React.js) Viết Dockerfile cho Backend (Node.js/Express) Thiết lập CI/CD Pipeline cho React.js và Nodejs với GitHub Actions "},{"uri":"https://thanhlong1512.github.io/Workshop-AWS/vi/2-prerequiste/2.2-create-policies/","title":"Tạo IAM Policies","tags":[],"description":"","content":"AWS Identity and Access Management (IAM) Policy ℹ️ Tổng quan AWS Identity and Access Management (IAM) Policy là tài liệu định nghĩa quyền truy cập chi tiết trong AWS. IAM Policy có thể được gán cho:\nIAM Groups (Nhóm người dùng) IAM Users (Người dùng) IAM Roles (Vai trò) 🔒 Cấu trúc và Phạm vi\nIAM Policy bao gồm các thành phần chính:\nEffect: Cho phép (Allow) hoặc từ chối (Deny) quyền Action: Các hành động được phép thực hiện Resource: Tài nguyên AWS được áp dụng Condition: Điều kiện bổ sung (nếu có) 💡 Pro Tip: Luôn tuân thủ nguyên tắc đặc quyền tối thiểu khi tạo IAM Policy. Chỉ cấp những quyền cần thiết cho người dùng thực hiện công việc.\n⚠️ Lưu ý quan trọng: Khi một IAM Policy được gán cho một đối tượng (User/Group/Role), các quyền sẽ có hiệu lực ngay lập tức. Hãy kiểm tra kỹ phạm vi quyền trước khi áp dụng. Các bước thực hiện tạo Policies Bước 1: Truy cập AWS Console -\u0026gt; IAM\nBước 2: Chọn Policies -\u0026gt; Create Policy Bước 3: Chọn Policy editor: JSON và thay thế json bên dưới json { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"KMSPermissions\", \"Effect\": \"Allow\", \"Action\": [ \"kms:Encrypt\", \"kms:Decrypt\", \"kms:ReEncrypt*\", \"kms:GenerateDataKey*\", \"kms:DescribeKey\" ], \"Resource\": \"*\", \"Condition\": { \"StringEquals\": { \"kms:ViaService\": \"s3.ap-southeast-1.amazonaws.com\" } } } ] } Bước 4: Nhập Policy name: WebsiteKMSPolicy và sau đó chọn Create Policy\nBước 5: Kiểm tra policy đã tạo\n"},{"uri":"https://thanhlong1512.github.io/Workshop-AWS/vi/3-containerization/3.3-deloy-scripts/3.3.2-deploy-be/","title":"Tạo scripts để deploy ứng dụng Node.js","tags":[],"description":"","content":"Giới thiệu Việc deploy ứng dụng Node.js lên production server là một quá trình phức tạp với nhiều bước cần thực hiện chính xác. Thay vì làm thủ công từng bước - dễ dẫn đến sai sót và mất thời gian, chúng ta sẽ tạo các scripts tự động hóa toàn bộ quá trình này. Scripts deployment giúp đảm bảo tính nhất quán, giảm thiểu lỗi human error và cho phép deploy nhanh chóng, đáng tin cậy. Đặc biệt quan trọng khi cần deploy nhiều lần hoặc trên nhiều môi trường khác nhau. Trong thực tế production, một quy trình deploy Node.js chuẩn cần bao gồm: setup môi trường server, cài đặt dependencies, cấu hình web server (Nginx), thiết lập SSL, quản lý process và monitoring. Mỗi bước đều có những chi tiết kỹ thuật riêng và cần được thực hiện theo đúng thứ tự.\nLợi ích của việc script hóa deployment Tính nhất quán: Mỗi lần deploy đều thực hiện chính xác các bước giống nhau, loại bỏ sự khác biệt giữa các lần deploy và đảm bảo môi trường production ổn định. Tiết kiệm thời gian: Tự động hóa các tác vụ lặp đi lặp lại, giảm thời gian deploy từ hàng giờ xuống còn vài phút. Giảm thiểu lỗi: Loại bỏ human error thường xảy ra khi thực hiện thủ công nhiều bước phức tạp. Khả năng rollback: Có thể nhanh chóng quay lại phiên bản trước khi gặp vấn đề. Tái sử dụng: Scripts có thể được customize và sử dụng cho multiple projects và environments. Quy trình thực hiện Bước 1: Truy cập vào EC2 -\u0026gt; Instances .\nBước 2: Chọn instances đã tạo -\u0026gt; Connect -\u0026gt; Connect\nBước 3: Copy dòng lệnh và chạy lệnh sudo apt-get update \u0026amp;\u0026amp; sudo apt-get install docker.io -y \u0026amp;\u0026amp; sudo systemctl start docker \u0026amp;\u0026amp; sudo chmod 666 /var/run/docker.sock \u0026amp;\u0026amp; sudo systemctl enable docker \u0026amp;\u0026amp; docker \u0026ndash;version và sau đó chạy lệnh docker ps để kiểm tra cài đặt Bước 4: Truy cập GitHub và vào dự án AWS-BE, sau đó chọn Settings -\u0026gt; Runner -\u0026gt; New self-hosted runner\nBước 5: Chọn Runner image: Linux và sau đó sao chép các lệnh dưới đây vào EC2 Instances\nBước 6: Sau khi chạy xong các lệnh trên, chạy thêm 2 lệnh bên dưới\nec2 sudo ./svc.sh install sudo ./svc.sh start Bước 7: Sau khi đã chạy thành công các lệnh trên, kiểm tra runner hoạt động như hình bên dưới Bước 8: Truy cập Visual Studio Code sau đó mở project AWS-Be Bước 9: Thực hiện push code lên GitHub,sau đó vào mục Actions trong GitHub và chờ đợi quá trình deploy Bước 10: Kiểm tra quá trình deploy thành công như hình bên bên dưới Bước 11: Sau khi quá trình deploy đã thành công thì kiểm tra Public IP EC2:8080 "},{"uri":"https://thanhlong1512.github.io/Workshop-AWS/vi/2-prerequiste/2.1-createec2/2.1.2-createsubnet/","title":"Tạo subnet","tags":[],"description":"","content":"Tạo subnet Click Subnets. Click Create subnet. Tại trang Create subnet. Tại mục VPC ID click chọn Mern-stack VPC. Tại mục Subnet name điền Mern-stack Subnet. Tại mục Availability Zone chọn Availability zone đầu tiên. Tại mục IPv4 CIRD block điền 10.0.0.0/28. Kéo xuống cuối trang , click Create subnet.\nClick chọn Mern-stack Subnet.\nClick Actions. Click Edit subnet settings. Click chọn Enable auto-assign public IPv4 address. Click Save. Tạo một Subnet tương tự với cấu hình bên dưới đây: Subnet name điền Mern-stack Subnet 02. Availability Zone chọn ap-southeast-1c "},{"uri":"https://thanhlong1512.github.io/Workshop-AWS/vi/3-containerization/3.1-development-env/3.1.2-setup-git/","title":"Thiết lập Git và Github Repository","tags":[],"description":"","content":"Tổng quan về Git và Github Repository GitHub là một mạng xã hội đặc biệt dành cho lập trình viên, là một hệ thống quản lý dự án, lưu trữ source code, theo dõi và cộng tác trong các dự án phần mềm.Ngoài ra, GitHub là một dịch vụ nổi tiếng cung cấp kho lưu trữ mã nguồn Git cho các dự án phần mềm. Github có đầy đủ những tính năng của Git, ngoài ra nó còn bổ sung những tính năng về social để các developer tương tác với nhau.\nGit là một hệ thống quản lý phiên bản phân tán (Distributed Version Control System – DVCS), nó là một trong những hệ thống quản lý phiên bản phân tán phổ biến nhất hiện nay. Git cung cấp cho mỗi lập trình viên kho lưu trữ (repository) riêng chứa toàn bộ lịch sử thay đổi.\nSự khác biệt giữa Git và GitHub\nGit là hệ thống kiểm soát phiên bản mã nguồn mở được sử dụng phổ biến cho các dự án lớn và nhỏ.\nGitHub là Git Server, nơi mọi người chia sẻ và cộng tác trên mã nguồn họ tạo ra. GitHub sử dụng hệ thống kiểm soát phiên bản là Git. GitHub đơn giản hoá việc sử dụng Git mà không cần tới giao diện dòng lệnh\nVì sao nên sử dụng GitHub?\nSử dụng phổ biến: Trong số các Github Server thì GitHub được coi là nền tảng phổ biến nhất và được ưa thích nhất với 4 triệu tổ chức và hơn 100 triệu nhà phát triển. Lý do ngoài việc sử dụng dễ dàng thì còn vì những tính năng như lưu trữ mã nguồn miễn phí, kiểm soát phiên bản phân tán, tạo project và tích hợp các nền tảng CI/CD phổ biến như Travis CI và Jenkins. Cộng đồng đông đảo: GitHub có một cộng đồng các nhà phát triển lớn mạnh và năng động, khiến nó trở thành một nơi tuyệt vời để khám phá và đóng góp cho các dự án nguồn mở. Bảo mật: Github cung cấp các tính năng như quét mã nguồn và phân tích dependency, giúp cải thiện tính bảo mật của mã nguồn. Lưu trữ mã: GitHub cung cấp nền tảng để lưu trữ mã nguồn của bạn và cộng đồng nhà phát triển toàn cầu có thể truy cập được chúng một cách dễ dàng. Hợp tác: Github tạo điều kiện cho sự hợp tác giữa các nhà phát triển bằng cách cho phép nhiều người có thể đồng thời đóng góp trên cùng một dự án. Cách sử dụng GitHub\nTạo một tài khoản GitHub Nếu bạn chưa có tài khoản, hãy truy cập trang chủ của GitHub và đăng ký tài khoản miễn phí. Sau khi nhập email và password, Github sẽ gửi cho bạn một email xác minh. Bạn cần mở email và click vào đường dẫn xác minh trong email để xác nhận địa chỉ email của bạn. Sau khi tài khoản của bạn được xác minh, bạn có thể khám phá GitHub bằng cách trải nghiệm các tính năng của Github như duyệt qua các repository và các dự án công khai để hiểu những gì có sẵn.\nCài đặt và cấu hình Git Nếu máy bạn chưa cài Git, bạn có thể làm theo hướng dẫn cài đặt Git và chọn cách phù hợp với hệ điều hành trên máy tính của bạn. Để kiểm tra, phiên bản Git bạn đã cài, bạn cần chạy lệnh Làm việc với repository\nTạo mới repository Khi tạo mới repository, bạn cần phải đặt tên không trùng với tên của repository nào đã có trong danh sách repository của bạn và thêm mô tả cho repository. Mặc định, GitHub sẽ tạo repository công khai. Bạn có thể sửa chế độ của repository trước lúc tạo hoặc sau khi tạo thành công. Sau khi bạn đã truy cập được chỗ tạo mới repository bạn giúp tôi tạo 2 repository với tên như sau: AWS-FE và AWS-BE\nSau khi bạn đã hoàn tất việc tạo 2 repository, bạn ra trang Home -\u0026gt; Avatar sát bên tay phải -\u0026gt; Your Repositories Nễu xuất hiện 2 repository bạn vừa mới tạo thì chúc mừng bạn đã tạo thành công "},{"uri":"https://thanhlong1512.github.io/Workshop-AWS/vi/2-prerequiste/2.3-sgandnetwork/2.3.2-setupnetwork/","title":"Thiết lập mạng","tags":[],"description":"","content":"Tạo NAT Gateway Tổng quan\nNAT Gateway cho phép các instances trong private subnet kết nối ra internet Đảm bảo kết nối một chiều từ trong ra ngoài, tăng tính bảo mật Cần có Elastic IP và đặt NAT Gateway trong public subnet Triển khai NAT Gateway Truy cập VPC Dashboard Chọn NAT Gateways Chọn Create NAT gateway Cấu hình NAT Gateway Name: Nhập mernstack-gateway-public Subnet: Chọn Mern-stack Subnet Connectivity type: Chọn Public Elastic IP allocation ID: Chọn Elastic IP vừa tạo Chọn Create NAT gateway Xác nhận tạo thành công NAT Gateway Tạo Internet Gateway Tổng quan\nInternet Gateway (IGW) là thành phần VPC cho phép kết nối internet Cung cấp điểm kết nối giữa VPC và internet Hỗ trợ giao tiếp hai chiều cho các tài nguyên trong VPC Triển khai Internet Gateway Truy cập giao diện VPC Chọn Internet Gateways từ menu bên trái Click vào Create internet gateway Cấu hình Internet Gateway Tại Name tag, nhập mernstack-igw Click Create internet gateway Xác nhận tạo Internet Gateway thành công Kết nối với VPC\nGắn Internet Gateway vào VPC Click Actions Chọn Attach to VPC Chọn Mern-stack VPC từ danh sách (VPC ID sẽ tự động điền) Click Attach internet gateway Sau khi gắn thành công: Tạo Route Table Tổng quan\nRoute Table là thành phần định tuyến lưu lượng mạng trong VPC Xác định đường đi cho các gói tin giữa các subnet và internet Cho phép kiểm soát luồng dữ liệu vào/ra VPC Triển khai Route Table Truy cập VPC Dashboard\nChọn Route Tables từ menu bên trái Click vào Create route table Cấu hình Route Table\nName: Nhập mernstack-route-tables VPC: Chọn Mern-stack VPC Chọn Create route table Xác nhận tạo Route Table thành công Cấu hình định tuyến\nThêm route cho Internet Gateway Chọn Actions Chọn Edit routes Cấu hình route mới Chọn Add route Destination: Nhập 0.0.0.0/0 (đại diện cho internet) Target: Chọn mernstack-igw và chọn IGW đã tạo Target: Chọn mernstack-gateway-public và chọn NAT Gateway đã tạo Click Save changes Liên kết với Subnet\nThiết lập subnet associations Chọn tab Subnet associations Click Edit subnet associations Chọn các subnet Chọn Subnet: Mern-stack Subnet Click Save associations Xác nhận cấu hình subnet associations thành công "},{"uri":"https://thanhlong1512.github.io/Workshop-AWS/vi/3-containerization/3.2-create-dockercontainer/3.2.2-dockerfile-fe/","title":"Viết Dockerfile cho Frontend (React.js)","tags":[],"description":"","content":"Giới thiệu Sau khi đã chuẩn bị đầy đủ môi trường phát triển với Docker Desktop, Git và các công cụ cần thiết, giờ là lúc chúng ta tạo ra Dockerfile để containerize ứng dụng React.js. Việc này giúp đảm bảo ứng dụng chạy nhất quán trên mọi môi trường từ development đến production.\nCấu trúc thư mục dự án Trước khi viết Dockerfile, hãy đảm bảo cấu trúc dự án React của bạn như sau: Tạo file .dockerignore\nĐầu tiên, tạo file **.dockerignore để loại trừ các file không cần thiết: dockerignore node_modules npm-debug.log build .dockerignore Dockerfile Dockerfile.prod .git .gitignore README.md .env .nyc_output coverage .cache .parcel-cache\" Dockerfile cho Development Environment dockerfile FROM node:alpine3.18 as build WORKDIR /app COPY package.json . RUN npm install COPY . . RUN npm run build FROM nginx:1.23-alpine WORKDIR /usr/share/nginx/html RUN rm -rf ./\\* COPY --from=build /app/build . EXPOSE 80 CMD [\"nginx\", \"-g\", \"daemon off;\"] Dockerfile tối ưu hơn cho development: dockerfile # Sử dụng Node.js Alpine để giảm kích thước image FROM node:18-alpine # Install dumb-init để xử lý signals RUN apk add --no-cache dumb-init # Tạo user để không chạy với root RUN addgroup -g 1001 -S nodejs RUN adduser -S reactjs -u 1001 # Set working directory WORKDIR /app # Copy package files với ownership cho user COPY --chown=reactjs:nodejs package\\*.json ./ # Switch to non-root user USER reactjs # Install dependencies RUN npm ci --only=production \u0026\u0026 npm cache clean --force # Copy source code COPY --chown=reactjs:nodejs . . # Expose port EXPOSE 3000 # Use dumb-init để xử lý signals properly ENTRYPOINT [\"dumb-init\", \"--\"] # Start development server CMD [\"npm\", \"start\"] "},{"uri":"https://thanhlong1512.github.io/Workshop-AWS/vi/3-containerization/3.3-deloy-scripts/","title":"Deploy Scripts","tags":[],"description":"","content":"Tổng quan Sau khi đã hoàn thành việc containerization ứng dụng với Docker và thiết lập CI/CD pipeline với GitHub Actions, bước tiếp theo là tạo ra các deploy scripts để tự động hóa quá trình triển khai ứng dụng lên các môi trường khác nhau. Deploy scripts là những script tự động hóa giúp đơn giản hóa việc deployment, từ việc pull Docker images, stop/start containers, đến việc kiểm tra health check và rollback khi cần thiết. Điều này đặc biệt quan trọng khi bạn cần deploy thường xuyên hoặc có nhiều môi trường khác nhau (development, staging, production).\nLợi ích của Deploy Scripts Tự động hóa hoàn toàn: Giảm thiểu các bước manual và human errors trong quá trình deployment. Consistency: Đảm bảo quá trình deployment được thực hiện nhất quán trên tất cả các môi trường. Rollback nhanh chóng: Có thể quay lại phiên bản trước đó một cách nhanh chóng khi gặp sự cố. Environment Management: Quản lý các biến môi trường và cấu hình khác nhau cho từng environment. Health Checking: Tự động kiểm tra ứng dụng sau khi deploy để đảm bảo hoạt động bình thường. Kiến trúc Deploy Scripts Trong phần này, chúng ta sẽ tạo deploy scripts cho cả Frontend (React.js) và Backend (Node.js) với các tính năng:\nEnvironment Detection: Tự động detect và áp dụng cấu hình phù hợp cho từng môi trường Docker Management: Tự động pull images, manage containers, và cleanup resources Health Monitoring: Kiểm tra trạng thái ứng dụng sau deployment Logging \u0026amp; Notification: Ghi log chi tiết và thông báo kết quả deployment Rollback Mechanism: Khả năng rollback về version trước khi có lỗi Nội dung Tạo scripts để deploy ứng dụng React.js Tạo scripts để deploy ứng dụng Node.js Domain \u0026amp; DNS Configuration với Route 53 "},{"uri":"https://thanhlong1512.github.io/Workshop-AWS/vi/3-containerization/3.3-deloy-scripts/3.3.3-domain-route53/","title":"Domain &amp; DNS Configuration với Route53","tags":[],"description":"","content":"Giới thiệu Sau khi đã triển khai thành công website của bạn trên AWS thông qua các dịch vụ như EC2, bước tiếp theo quan trọng không kém là thiết lập domain và cấu hình DNS để người dùng có thể truy cập trang web của bạn thông qua một tên miền chuyên nghiệp. Amazon Route53 là dịch vụ DNS đáng tin cậy và mạnh mẽ của AWS, giúp bạn dễ dàng quản lý domain và chuyển hướng lưu lượng truy cập đến các tài nguyên web của bạn.\nLợi ích việc sử dụng Route53 Amazon Route53 mang lại nhiều lợi ích vượt trội cho việc quản lý DNS và domain:\nĐộ tin cậy cao: Route53 được xây dựng trên cơ sở hạ tầng toàn cầu của AWS, đảm bảo thời gian hoạt động (uptime) 99.99% và khả năng chịu lỗi cao. Hiệu suất tối ưu: Với mạng lưới máy chủ DNS phân tán trên toàn thế giới, Route53 sử dụng định tuyến dựa trên độ trễ (Latency-based Routing) để tự động chuyển hướng người dùng đến vị trí AWS gần nhất, giảm thiểu thời gian tải trang. Tích hợp liền mạch: Route53 hoạt động tốt với các dịch vụ AWS khác như EC2, S3, CloudFront và Load Balancer, giúp quá trình cấu hình trở nên đơn giản và thuận tiện. Bảo mật mạnh mẽ: Hỗ trợ DNSSEC (DNS Security Extensions) để bảo vệ chống lại các cuộc tấn công DNS spoofing, cùng với khả năng tích hợp AWS IAM để kiểm soát truy cập chi tiết. Khả năng mở rộng: Tự động xử lý lượng truy vấn DNS lớn mà không cần quản lý thủ công, phù hợp cho các website có lưu lượng truy cập biến động. Quản lý tập trung: Giao diện quản lý thống nhất trong AWS Console, cho phép bạn quản lý tất cả domain và bản ghi DNS ở một nơi. Các bước thực hiện Phương án 1: Đăng ký Domain trực tiếp trên AWS Route53\nBước 1: Truy cập Route 53 -\u0026gt; Register a domain Bước 2: Nhập domain name mà bạn muốn đặt cho website, sau đó chọn mức giá phù hợp với bạn Bước 3: Chọn Select với domain mà bạn muốn, sau đó tiến hành thanh toán\nBước 4: Kiểm tra thanh toán thành công như hình bên dưới Bước 5: Truy cập Route 53 -\u0026gt; Create hosted zones\nBước 6: Nhập Domain name là tên miền mà bạn vừa đăng ký Bước 7: Kết quả tạo hosted zones thành công như hình bên dưới Bước 8: Chọn Create record\nRecord 1: Record name: \u0026ldquo;\u0026rdquo;, Value: IP EC2 Record 2: Record name: \u0026ldquo;www\u0026rdquo;, Value: IP EC2 Bước 9: Sau khi đã hoàn tất bước trên thì mất tối đa 2 giờ để DNS Propagation\nBước 10: Tiến hành tải Ngink trong EC2 Instances với lệnh\nsudo apt update \u0026amp;\u0026amp; sudo apt install nginx -y \u0026amp;\u0026amp; sudo systemctl start nginx \u0026amp;\u0026amp; sudo systemctl enable nginx Bước 11: Tiến hành tạo thư mục cấu hình Ngink\nsudo vim /etc/nginx/sites-available/mern-app Bước 12: Thêm cấu hình bên dưới vào thư mục Ngink ngink config server { listen 80; server_name cheese1512.com; location /api/ { proxy_pass http://localhost:8080/; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection 'upgrade'; proxy_set_header Host $host; proxy_cache_bypass $http_upgrade; } location / { proxy_pass http://localhost:5173/; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection 'upgrade'; proxy_set_header Host $host; proxy_cache_bypass $http_upgrade; } } Bước 13: Cài đặt Certbot cho SSL và bật Nginx site\nsudo apt install certbot python3-certbot-nginx -y sudo ln -s /etc/nginx/sites-available/mern-app /etc/nginx/sites-enabled/ Bước 14: Kiểm tra \u0026amp; tải lại Nginx\nsudo nginx -t sudo systemctl reload nginx Bước 15: Yêu cầu chứng chỉ SSL và Xác minh DNS\nsudo certbot --nginx -d testing.integrationsninjas.com nslookup testing.integrationsninjas.com Bước 16: Sau khi mọi thứ diễn ra thành công thì bạn có thể truy cập domain name mà bạn muốn\nPhương án 2: Sử dụng Domain từ một nhà cung cấp khác\nBước 1: Truy cập Hostinger tại đường link sau\nBước 2: Chọn Tên miền -\u0026gt; Nhận một tên miền mới Bước 3: Chọn tên miền phù hợp và tiến hành thanh toán Bước 4: Sau khi đã thanh toán thành công\nBước 5: Lặp lại từ bước 10 - 15 ở phía trên và kiểm tra kết quả\n"},{"uri":"https://thanhlong1512.github.io/Workshop-AWS/vi/4-securitymonitoring/4.3-aws-cloudwatch/","title":"Giám sát và thông báo tự động với CloudWatch và SNS","tags":[],"description":"","content":"Giới thiệu Trong môi trường cloud hiện đại, việc giám sát liên tục và phản ứng nhanh chóng với các sự cố là yếu tố then chốt quyết định sự thành công của ứng dụng. Amazon CloudWatch và Amazon Simple Notification Service (SNS) tạo thành một hệ thống giám sát và cảnh báo mạnh mẽ, cho phép bạn theo dõi hiệu suất ứng dụng 24/7 và nhận thông báo tức thì khi có bất thường xảy ra.\nAmazon CloudWatch - Đôi mắt của hạ tầng AWS\nAmazon CloudWatch là dịch vụ giám sát và quan sát toàn diện, cung cấp khả năng theo dõi tất cả các tài nguyên AWS và ứng dụng của bạn Amazon SNS - Hệ thống thông báo đa kênh\nAmazon Simple Notification Service (SNS) là messaging service hoàn toàn managed, cho phép gửi thông báo đến nhiều endpoint khác nhau Với CloudWatch và SNS, bạn có thể xây dựng một hệ thống giám sát intelligent, tự động phát hiện anomalies và đảm bảo đội ngũ vận hành luôn được thông báo kịp thời về tình trạng hệ thống. Đây là foundation cho DevOps practices hiệu quả và reliable system operations.\nCác bước thực hiện Bước 1: Truy cập AWS Console -\u0026gt; CloudWatch Bước 2: Chọn Logs -\u0026gt; Log groups -\u0026gt; Create log group Bước 3: Thực hiện cấu hình bên dưới:\nLog group name: Mernstack-Cloudwatch Retention setting: 1 days Log class: Standard Bước 4: Chọn Create Bước 5: Sau khi tạo thành công Log groups, truy cập AWS Console -\u0026gt; WAF \u0026amp; Shield\nBước 6: Chọn Mernstack-WAF -\u0026gt;Logging and metrics Bước 7: Chọn Enable-\u0026gt; Logging destination Bước 8: Chọn Log Groups mà bạn đã tạo, Redacted fields: HTTP Method sau đó chọn Save\nBước 9: Truy cập AWS Console -\u0026gt; Simple Notification Service -\u0026gt; Next step Bước 10: Thực hiện các cấu hình bên dưới\nType: Standard Name: Mernstack-SNS Advanced options:\nDelivery retry policy: Default Delivery status logging: Disabled (for lab) Encryption: Disabled (for lab) Access policy: Default Bước 11: Chọn Create Topic và sau đó kiểm tra kết quả Bước 12: Chọn Create subscription Bước 13: Chọn Protocol: Email, Endpoint: nguyenboo2018@gmail.com Bước 14: Chọn Create Subscription Bước 15: Truy cập AWS CloudWatch -\u0026gt; Alarm -\u0026gt; In Alarm -\u0026gt; Create alarm Bước 16: Thực hiện các cấu hình bên dưới:\nChọn select metric -\u0026gt; EC2 -\u0026gt; Mernstack-EC2 Chọn tương tự như hình bên dưới Đặt Alarm Name: Mernstack-Alarm sau đó chọn Next -\u0026gt; Create Alarm "},{"uri":"https://thanhlong1512.github.io/Workshop-AWS/vi/3-containerization/3.1-development-env/3.1.3-clone-project/","title":"Hướng dẫn clone dự án FE&amp;BE và đẩy lên Github Repository","tags":[],"description":"","content":"Sau khi bạn đã có 2 repository trong tài khoản GitHub của bạn, bạn giúp tôi tải phần mềm sau: Visual Studio Code và GitHub Desktop để thuận lợi trong việc clone dự án và đẩy lên GitHub Repository diễn ra nhanh hơn thì sau đây tôi sẽ giới thiệu sơ qua về 2 phần mềm đó\nVisual Studio Code là gì Visual Studio Code (VS Code) là một trình soạn thảo mã nguồn miễn phí, đa nền tảng, được phát triển bởi Microsoft. Nó đã nhanh chóng trở thành một trong những trình soạn thảo phổ biến nhất dành cho các nhà phát triển, nhờ giao diện thân thiện, tính năng mạnh mẽ và khả năng mở rộng cao.\nLý do nên chọn Visual Studio Code?\nMiễn phí và mã nguồn mở: VS Code hoàn toàn miễn phí và được cấp phép theo giấy phép MIT. Điều này nghĩa là bạn có thể sử dụng và sửa đổi nó tự do mà không phải trả bất kỳ khoản phí nào. Bạn thậm chí có thể đóng góp vào dự án bằng cách sửa lỗi, thêm tính năng mới hoặc dịch thuật. Điều này đã thu hút rất nhiều lập trình viên và đóng góp vào sự phát triển mạnh mẽ của VS Code. Đa nền tảng: VS Code có sẵn trên Windows, macOS và Linux, cho phép bạn sử dụng nó trên bất kỳ hệ điều hành nào. Điều này mang lại sự thuận tiện cho các lập trình viên khi họ có thể làm việc trên nhiều thiết bị khác nhau mà không cần thay đổi môi trường phát triển. Giao diện thân thiện: VS Code có giao diện đơn giản, dễ sử dụng và trực quan, phù hợp cho cả người mới bắt đầu và các nhà phát triển có kinh nghiệm. Hỗ trợ nhiều ngôn ngữ lập trình: VS Code hỗ trợ hơn 30 ngôn ngữ lập trình phổ biến, bao gồm JavaScript, Python, Java, C++, C#, Golang, PHP và nhiều hơn nữa. Bạn có thể sử dụng VS Code để viết mã cho bất kỳ dự án nào, bất kể ngôn ngữ lập trình nào bạn đang sử dụng. VS Code cung cấp hỗ trợ cú pháp, gợi ý mã thông minh và các tính năng gỡ lỗi cho mỗi ngôn ngữ, giúp bạn viết mã hiệu quả và dễ dàng hơn.Ví dụ: Đối với JavaScript: VS Code cung cấp hỗ trợ hoàn chỉnh cho JavaScript, bao gồm IntelliSense (gợi ý mã thông minh), hỗ trợ gỡ lỗi tích hợp, hỗ trợ TypeScript. GitHub Desktop là gì ?\nGitHub Desktop đóng vai trò là cầu nối cho những người thích giao diện đồ họa hơn là thao tác dòng lệnh. Nó hợp lý hóa quy trình làm việc của Git, từ việc sao chép kho lưu trữ đến đẩy thay đổi và tích hợp các tính năng bổ sung như tô sáng cú pháp và xem xét mã để tạo điều kiện cho sự cộng tác và nâng cao năng suất.\nƯu điểm và Nhược điểm\nƯu điểm của GitHub Desktop\nThiết kế trực quan: Đơn giản hóa việc điều hướng, cam kết và quản lý nhánh để mang lại trải nghiệm mượt mà cho người dùng. Tích hợp GitHub: Cung cấp quy trình làm việc liền mạch để quản lý kho lưu trữ và cộng tác trực tiếp với GitHub. Hợp tác hợp lý: Nâng cao nỗ lực của nhóm với việc xem xét mã, thảo luận và đóng góp dễ dàng cho các dự án GitHub. Cập nhật tự động: Tự động cập nhật các tính năng mới nhất và cải tiến bảo mật cho ứng dụng. Nhược điểm của GitHub Desktop\nKhông có hỗ trợ Linux chính thức: Việc không có phiên bản Linux chính thức có thể dẫn đến những thách thức về khả năng tương thích và cập nhật Bộ tính năng cơ bản: Có thể không đủ cho người dùng tìm kiếm các chức năng Git nâng cao như rebase tương tác hoặc biểu đồ cam kết chi tiết. Giới hạn đối với quy trình làm việc phức tạp: Những người có dự án phức tạp có thể thấy khả năng của GitHub Desktop có phần hạn chế. Tập trung vào GitHub: Được tối ưu hóa cho GitHub, điều này có thể hạn chế tiện ích của GitHub đối với các dự án được lưu trữ trên các nền tảng khác. Cách clone dự án FE\u0026amp;BE và đẩy lên Github Repository Bước 1: Bạn truy cập mẫu 2 repository FE\u0026amp;BE từ 2 đường link sau: FE Repository và BE repository. Bước 2: Copy đường dẫn từ BE repository và sau đó mở GitHub Desktop lên. Bước 3: Sau khi mở Github Desktop thành công sau đó bạn vào File -\u0026gt; Clone a repository -\u0026gt; URL. Bước 4: Bạn dán đường dẫn repository mà bạn đã copy vào ô input đầu tiên và tạo một folder mà bạn muốn lưu. Bước 5: Sau khi bạn clone thành công thì bạn tiếp tục mở Visual Studio Code. Bước 6: Chọn File -\u0026gt; Open folder to start working -\u0026gt; Chọn thư mục mà bạn đã clone về. Bước 7: Sau khi đã xuất hiện các thư mục mà dự án bạn đã clone tiếp tục bạn chọn Terminal -\u0026gt; New Terminal rồi sau đó bạn chạy lệnh npm install. Bước 8: Chạy tiếp tục lệnh npm run start và nếu xuất hiện giống hình ảnh bên dưới thì chúc mừng bạn. Bước 9: Tiếp tục sẽ đẩy project này lên repository mà bạn đã tạo Bước 10: Bạn gõ lệnh git remote remove origin để xóa remote cũ từ repository mà bạn đã clone. Bước 11: Sau đó bạn mở repository AWS-BE và copy đường dẫn ở hình bên dưới và đưa vào terminal. Bước 12: Sau khi tiếp tục gõ lệnh git push -u origin main và sau đó ra reload lại trang và nếu xuất hiện hình bên dưới thì chúc mừng bạn. Bước 13: Lặp lại từ B2 -\u0026gt; B12 cho FE "},{"uri":"https://thanhlong1512.github.io/Workshop-AWS/vi/2-prerequiste/2.3-sgandnetwork/","title":"Nhóm bảo mật &amp; thiết lập mạng","tags":[],"description":"","content":"Nội dung Tạo nhóm bảo mật Thiết lập mang "},{"uri":"https://thanhlong1512.github.io/Workshop-AWS/vi/2-prerequiste/2.1-createec2/2.1.3-createec2linux/","title":"Tạo Linux EC2","tags":[],"description":"","content":" Truy cập giao diện quản trị dịch vụ EC2 Click Instances. Click Launch instances. Name: Nhập Mern-stack EC2\nTrong bước chọn AMI\nChọn Quick Start Chọn Ubuntu AMI: chọn Ubuntu Server 24.04 LTS Trong phần key pair Click chọn Create key pair. Chọn và điền thông tin như trên hình Security Note\nKey pair là thành phần quan trọng để xác thực khi kết nối đến EC2 instance. Lưu trữ file .pem ở nơi an toàn và không chia sẻ với người khác. Mất key pair có thể dẫn đến việc không thể truy cập vào instance của bạn. Tiếp theo, chúng ta thực hiện cấu hình network cho instance Tại mục Network chọn Mern-stack VPC. Tại mục Subnet chọn Mern-stack Subnet. Tại mục Auto-assign Public IP chọn Use subnet setting (Enable) Kiểm tra lại và chọn Launch instance\nHoàn thành khởi tạo instance. Tiến hành xem chi tiết instance bằng cách chọn View all instance\nĐợi khoảng 5 phút sau khi khởi tạo, Status check chuyển sang 2/2 check passed và trạng thái instance là Running Pro Tip: Status check “2/2 checks passed” xác nhận rằng cả kiểm tra hệ thống (do AWS thực hiện) và kiểm tra instance (do hệ điều hành thực hiện) đều thành công. Điều này đảm bảo instance của bạn đã sẵn sàng để sử dụng.\n"},{"uri":"https://thanhlong1512.github.io/Workshop-AWS/vi/3-containerization/","title":"Thiết lập và Containerization","tags":[],"description":"","content":"Nội dung Chuẩn bị Development Environment Tạo Docker Container Chuẩn bị Deploy Scripts "},{"uri":"https://thanhlong1512.github.io/Workshop-AWS/vi/3-containerization/3.2-create-dockercontainer/3.2.3-dockerfile-be/","title":"Viết Dockerfile cho Backend (Node.js/Express)","tags":[],"description":"","content":"Giới thiệu Sau khi đã chuẩn bị đầy đủ môi trường phát triển với Docker Desktop, Git và các công cụ cần thiết và đã sau khi hoàn tất việc tạo dockerfile cho AWS-FE tiếp tục ta sẽ thực hiện cho AWS-BE. Việc này giúp đảm bảo ứng dụng chạy nhất quán trên mọi môi trường từ development đến production.\nCấu trúc thư mục dự án Trước khi viết Dockerfile, hãy đảm bảo cấu trúc dự án React của bạn như sau: Tạo file .dockerignore\nĐầu tiên, tạo file **.dockerignore để loại trừ các file không cần thiết: dockerignore node_modules npm-debug.log .git .gitignore README.md .env .env.local .env.development .env.test .env.production .nyc_output coverage .cache logs \\*.log .DS_Store Dockerfile .dockerignore docker-compose.yml Dockerfile cho Development Environment dockerfile FROM node:alpine3.18 WORKDIR /app COPY package.json ./ RUN npm install COPY . . EXPOSE 4000 CMD [ \"npm\", \"run\", \"start\" ] Dockerfile tối ưu hơn cho development: dockerfile # Sử dụng Node.js Alpine để giảm kích thước image FROM node:18-alpine # Install dumb-init để xử lý signals properly RUN apk add --no-cache dumb-init # Tạo user để không chạy với root privileges RUN addgroup -g 1001 -S nodejs RUN adduser -S expressjs -u 1001 # Set working directory WORKDIR /app # Copy package files với ownership cho user COPY --chown=expressjs:nodejs package\\*.json ./ # Switch to non-root user để install dependencies USER expressjs # Install dependencies (sử dụng npm ci cho faster, reliable builds) RUN npm ci --only=production \u0026\u0026 npm cache clean --force # Copy source code với proper ownership COPY --chown=expressjs:nodejs . . # Expose port mà backend sẽ chạy EXPOSE 4000 # Use dumb-init để xử lý signals properly ENTRYPOINT [\"dumb-init\", \"--\"] # Start development server CMD [\"npm\", \"run\", \"dev\"] "},{"uri":"https://thanhlong1512.github.io/Workshop-AWS/vi/4-securitymonitoring/","title":"Bảo mật và Giám sát phần mềm","tags":[],"description":"","content":"Giới thiệu Trong kiến trúc ứng dụng web hiện đại, việc đảm bảo bảo mật và giám sát hệ thống là yếu tố then chốt quyết định sự thành công của dự án. Phần này sẽ hướng dẫn bạn triển khai các biện pháp bảo mật toàn diện và hệ thống giám sát hiệu quả cho ứng dụng được deploy trên AWS, bao gồm việc bảo vệ dữ liệu, kiểm soát truy cập, phòng chống tấn công và theo dõi hiệu suất hệ thống theo thời gian thực.\nNội dung Mã hóa dữ liệu với AWS KMS Bảo vệ ứng dụng web với AWS WAF Giám sát và thông báo tự động với CloudWatch và SNS "},{"uri":"https://thanhlong1512.github.io/Workshop-AWS/vi/2-prerequiste/2.4-createiamrole/","title":"Tạo IAM Role","tags":[],"description":"","content":"Tạo IAM Role Trong bước này chúng ta sẽ tiến hành tạo IAM Role. Trong IAM Role này sẽ được gán policy WebsiteKMSPolicy, đây là policy cho phép máy chủ EC2 có thể giao tiếp với Key Management Service.\nTruy cập vào giao diện quản trị dịch vụ IAM Ở thanh điều hướng bên trái, click Roles -\u0026gt; Create role. Click AWS service và click EC2. Click Next. Trong ô Search, điền WebsiteKMSPolicy và ấn phím Enter để tìm kiếm policy này. Click chọn policy WebsiteKMSPolicy. Click Next: Tags. Click Next: Review. Đặt tên cho Role là Roles_ec2 ở Role Name Click Create Role . Kiểm tra kết quả như hình bên dưới "},{"uri":"https://thanhlong1512.github.io/Workshop-AWS/vi/3-containerization/3.2-create-dockercontainer/3.2.4-github-action/","title":"Thiết lập CI/CD Pipeline cho React.js và Nodejs với GitHub Actions","tags":[],"description":"","content":"Giới thiệu CI/CD (Continuous Integration/Continuous Deployment) là quá trình tự động hóa việc build, test và deploy ứng dụng. GitHub Actions cung cấp platform mạnh mẽ để thiết lập CI/CD pipeline cho cả Frontend (React.js) và Backend (Node.js).\nFrontend CI/CD Pipeline\nTạo file .github/workflows/cicd.yml yaml name: Deploy React Application on: push: branches: - master jobs: build: runs-on: ubuntu-latest steps: - name: Checkout source uses: action/checkout@v4 - name: Login to DockerHub run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} - name: Build Docker image run: docker build -t thanhlep/reactjs-web --build-arg REACT_APP_NODE_ENV='production' --build-arg REACT_APP_SERVER_URL='${{ secrets.REACT_APP_SERVER_URL }}' . - name: Push Docker image run: docker push thanhlep/reactjs-web deploy: needs: build runs-on: ubuntu-latest steps: - name: Pull image from DockerHub run: docker pull thanhlep/reactjs-web:latest - name: Delete old container run: docker rm -f reactjs-web-container - name: Run Docker container run: docker run -d -p 5173:80 --name reactjs-web-container thanhlep/reactjs-web Backend CI/CD Pipeline\nTạo file .github/workflows/cicd.yml\nyaml name: Deploy Node Application on: push: branches: - main jobs: build: runs-on: ubuntu-latest steps: - name: Checkout Source uses: actions/checkout@v4 - name: Login to docker hub run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} - name: Build Docker Image run: docker build -t thanhlep/nodejs-web . - name: Publish Image to docker hub run: docker push thanhlep/nodejs-web:latest deploy: needs: build runs-on: self-hosted steps: - name: Pull image from docker hub run: docker pull thanhlep/nodejs-web:latest - name: Delete old container run: docker rm -f nodejs-web-container - name: Run Docker Container run: docker run -d -p 4000:4000 --name nodejs-web-container -e MONGO_PASSWORD='${{ secrets.MONGO_PASSWORD }}' thanhlep/nodejs-web "},{"uri":"https://thanhlong1512.github.io/Workshop-AWS/vi/5-cleanup/","title":"Dọn dẹp tài nguyên  ","tags":[],"description":"","content":"Chúng ta sẽ tiến hành các bước sau để xóa toàn bộ các tài nguyên đã tạo trong bài thực hành này theo đúng thứ tự để tránh lỗi phụ thuộc.\nBước 1: Dừng và xóa ALB (Application Load Balancer)\nTruy cập giao diện quản trị EC2 Click Load Balancers trong menu bên trái Chọn Application Load Balancer đã tạo Click Actions → Delete Xác nhận bằng cách gõ \u0026ldquo;confirm\u0026rdquo; và click Delete Xóa Target Groups Click Target Groups Chọn target group đã tạo cho ALB Click Actions → Delete Click Yes, delete để xác nhận Bước 2: Xóa EC2 Instances\n1. Xóa EC2 Instances\nTruy cập giao diện EC2 Click Instances Chọn tất cả instances (cả public và private) Click Instance State → Terminate instance Click Terminate để xác nhận Bước 3: Xóa các AWS Services khác\nXóa CloudWatch và SNS\n1. Truy cập CloudWatch\nClick Alarms → chọn các alarm đã tạo → Delete Click Log groups → chọn Log groups → Delete log group(s) 2. Truy cập SNS\nClick Topics → chọn topic → Delete Click Subscriptions → chọn subscription → Delete 3. Xóa Route 53\nTruy cập Route 53 Click Hosted zones Chọn hosted zone (trừ các bản ghi mặc định) Xóa các record set trước, sau đó xóa hosted zone 4. Xóa KMS và WAF\nTruy cập KMS Click Customer managed keys Chọn key đã tạo → Key actions → Schedule key deletion Chọn thời gian chờ (tối thiểu 7 ngày) → Schedule deletion 5. Truy cập WAF\nClick Web ACLs Chọn Web ACL → Delete Gõ \u0026ldquo;delete\u0026rdquo; để xác nhận Bước 5: Dọn dẹp CloudFront\nTruy cập CloudFront Chọn distribution đã tạo Click Disable và chờ status chuyển thành \u0026ldquo;Disabled\u0026rdquo; Sau đó click Delete Bước 6: Xóa IAM Roles và Users\n1. Truy cập IAM\nClick Roles Tìm kiếm và chọn các role đã tạo (SSM-Role, ECS-Role, etc.) Click Delete cho từng role Điền tên role để xác nhận 2. Xóa IAM Users\nClick Users Chọn user đã tạo (Portfwd, etc.) Click Delete user Điền tên user để xác nhận 3. Xóa IAM Policies (custom)\nClick Policies Filter theo \u0026ldquo;Customer managed\u0026rdquo; Chọn policy đã tạo → Actions → Delete Bước 7: Xóa S3 Bucket\n1. Truy cập S3\nChọn bucket đã tạo Click Empty Gõ \u0026ldquo;permanently delete\u0026rdquo; → Empty Click Exit 2. Xóa bucket\nClick Delete Gõ tên bucket để xác nhận → Delete bucket Bước 8: Xóa Internet Gateway và NAT Gateway\n1. Xóa NAT Gateway trước\nClick NAT Gateways Chọn NAT Gateway → Actions → Delete NAT gateway Gõ \u0026ldquo;delete\u0026rdquo; để xác nhận 2. Giải phóng Elastic IP\nClick Elastic IPs Chọn EIP đã tạo → Actions → Release Elastic IP address 3. Detach và xóa Internet Gateway\nClick Internet Gateways Chọn IGW → Actions → Detach from VPC Sau đó Actions → Delete internet gateway Bước 9: Xóa VPC và các thành phần liên quan\n1. Xóa Security Groups (trừ default)\nClick Security Groups Chọn các security group đã tạo (không chọn default) Chọn Actions → Delete security group 2. Xóa Route Tables (trừ main)\nClick Route Tables Chọn route table đã tạo (không chọn main) Click Actions → Delete route table 3. Xóa Subnets\nClick Subnets Chọn tất cả subnet đã tạo Click Actions → Delete subnet 4. Xóa VPC\nClick Your VPCs Chọn VPC đã tạo (Lab VPC) Click Actions → Delete VPC Gõ \u0026ldquo;delete\u0026rdquo; để xác nhận Lưu ý quan trọng\n⚠️ Thứ tự xóa rất quan trọng: Phải xóa theo thứ tự từ các tài nguyên phụ thuộc đến tài nguyên chính để tránh lỗi.\n⚠️ Kiểm tra Region: Đảm bảo đang làm việc ở đúng AWS Region chứa các tài nguyên.\n⚠️ CloudFront: Cần disable trước khi xóa và có thể mất 15-20 phút để hoàn tất.\n⚠️ Billing: Kiểm tra AWS Billing Console để đảm bảo không còn tài nguyên nào đang tính phí.\n✅ Hoàn tất: Sau khi thực hiện xong tất cả các bước, hãy chờ 5-10 phút rồi kiểm tra lại từng service để đảm bảo đã xóa sạch.\n"},{"uri":"https://thanhlong1512.github.io/Workshop-AWS/vi/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://thanhlong1512.github.io/Workshop-AWS/vi/tags/","title":"Tags","tags":[],"description":"","content":""}]